@page "/products"
@using CoffeePOS.Models;
@using CoffeePOS.Services;

<div class="row mt-3 mb-3">
    <div class="col-6">
        <h3>Product Index</h3>
    </div>
    <div class="col-6 text-end">
        @if (_globalState.CurrentUser?.Role == Role.Admin)
        {
                        <button class="btn btn-outline-dark" type="button" @onclick="OpenAddProductDialog">
                            <span class="oi oi-plus" /> &nbsp; Add a new product
                        </button>
        }
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                <div class="d-flex">
                    <input type="search" class="form-control search" placeholder="Search" @oninput="SearchProductName" />
                    <a class='btn text-@(_sortBy == "product" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
					   @onclick='()=>SortByHandler("product")'>
                        <span class='oi oi-sort-@(_sortBy == "product" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Quantity
                    <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
					   @onclick='()=>SortByHandler("quantity")'>
                        <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Created By
                    <a class='btn text-@(_sortBy == "createdBy" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
					   @onclick='()=>SortByHandler("createdBy")'>
                        <span class='oi oi-sort-@(_sortBy == "createdBy" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th>
                <div class="d-flex">
                    Created At
                    <a class='btn text-@(_sortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
					   @onclick='()=>SortByHandler("createdAt")'>
                        <span class='oi oi-sort-@(_sortBy == "createdAt" ? _sortDirection : "ascending")' />
                    </a>
                </div>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<Models.Product> products = _products;

            if (_sortBy == "product")
            {
                products = _sortDirection == "ascending" ? products.OrderBy(p => p.Title) : products.OrderByDescending(p => p.Title);
            }
            else if (_sortBy == "quantity")
            {
                products = _sortDirection == "ascending" ? products.OrderBy(p => p.Quantity) : products.OrderByDescending(p => p.Quantity);
            }
            else if (_sortBy == "createdBy")
            {
                products = _sortDirection == "ascending" ? products.OrderBy(p => p.CreatedBy) : products.OrderByDescending(p => p.CreatedAt);
            }
            else if (_sortBy == "createdAt")
            {
                products = _sortDirection == "ascending" ? products.OrderBy(p => p.CreatedAt) : products.OrderByDescending(p => p.CreatedBy);
            }

            foreach (var product in products)
            {
                        <tr>
                            <td>@product.Title</td>
                            <td>@product.Quantity</td>
                            <td>
                        @{
                            var creator = ProductService.GetById(product.Id);
                            var user = UserService.GetById(creator.CreatedBy);
                                        <span>@(creator == null ? "Administration" : user.Username)</span>
                        }
                            </td>
                            <td>
                                <p class="small mb-0">
                            @product.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                                </p>
                            </td>
                            <td>
                        @if (_globalState.CurrentUser != null)
                        {
                            if (_globalState.CurrentUser.Role == Role.Staff)
                            {
                                                <button class="btn btn-outline-secondary" type="button" @onclick="()=>OpenOrderProductDialog(product)">
                                                    <span class="oi oi-pencil" /> &nbsp; Order
                                                </button>
                            }
                            else if (_globalState.CurrentUser.Role == Role.Admin)
                            {
                                                <button class="btn btn-outline-secondary" type="button" @onclick="()=>OpenEditProductDialog(product)">
                                                    <span class="oi oi-pencil" /> &nbsp; Edit
                                                </button>
                                                <button class="btn btn-outline-danger" type="button" @onclick="()=>OpenDeleteProductDialog(product)">
                                                    <span class="oi oi-delete" /> &nbsp; Delete
                                                </button>
                            }
                        }
                            </td>
                        </tr>
            }
        }
    </tbody>
</table>

@if (_showEditProductDialog)
{
                    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditProductDialogClose" OkLabel="@_dialogOkLabel">
                        <form>
                            <div class="mb-3">
                                <label for="text" class="form-label">&nbsp;Product Title</label>
                                <input type="text" class="form-control" @bind="_productModel.Title" placeholder="Enter a product title">
                            </div>
                            <div class="mb-3">
                                <label for="number" class="form-label">&nbsp;Quantity</label>
                                <input type="number" class="form-control" @bind="_productModel.Quantity" placeholder="Enter the quantity of the product">
                            </div>
                        </form>

        @if (!string.IsNullOrEmpty(_editProductErrorMessage))
        {
                                            <AlertMessage Type="danger" Message="@_editProductErrorMessage" />
        }
                    </ModalDialog>
}

@if (_showDeleteProductDialog)
{
                    <ModalDialog Title="Delete a product" OnClose="@OnDeleteProductDialogClose" OkLabel="Confirm">
                        <p>Are you sure you want to delete <strong>@_deleteProduct.Title</strong>?</p>
        @if (!string.IsNullOrEmpty(_deleteProductErrorMessage))
        {
                                            <AlertMessage Type="danger" Message="@_deleteProductErrorMessage" />
        }
                    </ModalDialog>
}

@if (_showOrderProductDialog)
{
                    <ModalDialog Title="@_dialogTitle" OnClose="@OnOrderProductDialogClose" OkLabel="@_dialogOkLabel">
                        <form>
                            <div class="mb-3">
                                <label for="text" class="form-label">&nbsp;Product Title</label>
                                <input type="text" class="form-control" @bind="_productModel.Title" readonly>
                            </div>
                            <div class="mb-3">
                                <label for="number" class="form-label">&nbsp;Quantity</label>
                                <input type="number" class="form-control" @bind="_orderModel.Quantity" placeholder="Enter the quantity of the product">
                            </div>
                        </form>

        @if (!string.IsNullOrEmpty(_orderProductErrorMessage))
        {
                                            <AlertMessage Type="danger" Message="@_orderProductErrorMessage" />
        }

                    </ModalDialog>
}

@code {
    [CascadingParameter]
    public GlobalState _globalState { get; set; }

    public bool _showEditProductDialog { get; set; }

    public bool _showDeleteProductDialog { get; set; }

    public bool _showOrderProductDialog { get; set; }

    public List<Models.Product> _products { get; set; }

    public List<Models.Order> _orders { get; set; }

    public Models.Product _deleteProduct { get; set; }

    public string _dialogTitle { get; set; }

    public string _dialogOkLabel { get; set; }

    public string _editProductErrorMessage { get; set; }

    public string _orderProductErrorMessage { get; set; }

    public string _deleteProductErrorMessage { get; set; }

    public Models.Product _productModel { get; set; }

    public Models.Order _orderModel { get; set; }

    public string _sortBy = "Product";

    public string _sortDirection = "ascending";


    protected override void OnInitialized()
    {
        _products = ProductService.GetAll();
    }

    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddProductDialog()
    {
        _dialogTitle = "Add a new product";

        _dialogOkLabel = "Add";

        _productModel = new Models.Product();

        _productModel.Id = Guid.Empty;

        _showEditProductDialog = true;
    }

    private void SearchProductName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();

        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _products = ProductService.GetAll().Where(p => p.Title.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _products = ProductService.GetAll();

        }
    }

    private void OpenEditProductDialog(Models.Product product)
    {
        _dialogTitle = "Edit a Product";
        _dialogOkLabel = "Save Item";

        _productModel = product;

        _showEditProductDialog = true;
    }

    private void OpenOrderProductDialog(Models.Product product)
    {
        _dialogTitle = "Order a Product";
        _dialogOkLabel = "Order Item";
        _orderProductErrorMessage = "";
        _productModel = product;
        _orderModel = new Order();
        _orderModel.Quantity = 0;

        _showOrderProductDialog = true;
    }

    private void OpenDeleteProductDialog(Models.Product product)
    {
        _deleteProduct = product;

        _showDeleteProductDialog = true;
    }

    private void OnEditProductDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditProductDialog = false;
        }
        else
        {
            try
            {
                _editProductErrorMessage = "";

                if (_productModel.Id == Guid.Empty)
                {
                    _products = ProductService.Create(_globalState.CurrentUser.Id, _productModel.Title, _productModel.Quantity);
                }
                else
                {
                    _products = ProductService.Update(_productModel.Id, _productModel.Title, _productModel.Quantity);
                }

                _showEditProductDialog = false;
            }
            catch (Exception e)
            {
                _editProductErrorMessage = e.Message;
            }
        }
    }

    private void OnOrderProductDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showOrderProductDialog = false;
        }
        else
        {
            try
            {
                _orderProductErrorMessage = "";

                _orders = OrderService.Create(_globalState.CurrentUser.Id, _productModel.Id, _orderModel.Quantity);

                _showOrderProductDialog = false;
            }
            catch (Exception e)
            {
                _orderProductErrorMessage = e.Message;
            }
        }
    }

    private void OnDeleteProductDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteProductDialog = false;
            _deleteProduct = null;
        }
        else
        {
            try
            {
                _deleteProductErrorMessage = "";
                _products = ProductService.Delete(_deleteProduct.Id);
                _showDeleteProductDialog = false;
                _deleteProduct = null;
            }
            catch (Exception e)
            {
                _deleteProductErrorMessage = e.Message;
            }
        }
    }
}